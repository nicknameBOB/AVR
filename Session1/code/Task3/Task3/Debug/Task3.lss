
Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000117  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000115  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a2  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
	 * SW: 1 Button is open, 0 button is pressed
	 * Set to 1: FLAG |= ( 1 << BIT_POS )
	 * Set to 0: FLAG &= ~( 1 << BIT_POS )
	*/

	DDRC |= (1 << LED0); // Set LED0 as output
  e4:	3f 9a       	sbi	0x07, 7	; 7
	DDRC &= ~(1 << SW0); // Set SW0 as input
  e6:	3e 98       	cbi	0x07, 6	; 7
	PORTC |= (1 << SW0); // Enable pull-up on button SW0
  e8:	46 9a       	sbi	0x08, 6	; 8
	int buttonCounter = 0; // To hold the button pressed state
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
				PORTC ^= (1 << LED0);
				buttonCounter = 1;
			}
		}
		else{
			buttonCounter = 0;			
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 e0       	ldi	r18, 0x00	; 0

    while (1) {
		if(!((1 << SW0) & PINC)){
			if (buttonCounter == 0){
				PORTC ^= (1 << LED0);
				buttonCounter = 1;
  f2:	51 e0       	ldi	r21, 0x01	; 1
  f4:	40 e0       	ldi	r20, 0x00	; 0
	DDRC &= ~(1 << SW0); // Set SW0 as input
	PORTC |= (1 << SW0); // Enable pull-up on button SW0
	int buttonCounter = 0; // To hold the button pressed state

    while (1) {
		if(!((1 << SW0) & PINC)){
  f6:	36 99       	sbic	0x06, 6	; 6
  f8:	08 c0       	rjmp	.+16     	; 0x10a <main+0x26>
			if (buttonCounter == 0){
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	41 f4       	brne	.+16     	; 0x10e <main+0x2a>
				PORTC ^= (1 << LED0);
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	80 58       	subi	r24, 0x80	; 128
 102:	88 b9       	out	0x08, r24	; 8
				buttonCounter = 1;
 104:	85 2f       	mov	r24, r21
 106:	94 2f       	mov	r25, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x2a>
			}
		}
		else{
			buttonCounter = 0;			
 10a:	83 2f       	mov	r24, r19
 10c:	92 2f       	mov	r25, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	ef e9       	ldi	r30, 0x9F	; 159
 110:	ff e0       	ldi	r31, 0x0F	; 15
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x2e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x34>
 118:	00 00       	nop
 11a:	ed cf       	rjmp	.-38     	; 0xf6 <main+0x12>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
