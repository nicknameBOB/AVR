
Kveld2PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000bd  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000b6  00000000  00000000  000003d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000145  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a2 30       	cpi	r26, 0x02	; 2
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <main>:
bool SW1_pressed,SW2_pressed;

int main(void)
{	
	//sett opp LED pins som utgang
	DDRD |= (1<<LED1)|(1<<LED2);
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	80 63       	ori	r24, 0x30	; 48
  f8:	8a b9       	out	0x0a, r24	; 10
	DDRA |= (1<<LED3);
  fa:	0b 9a       	sbi	0x01, 3	; 1
	
	//husk pullups for knappene
	PORTC |= (1<<SW1);
  fc:	41 9a       	sbi	0x08, 1	; 8
	PORTA |= (1<<SW2)|(1<<SW3);
  fe:	82 b1       	in	r24, 0x02	; 2
 100:	83 60       	ori	r24, 0x03	; 3
 102:	82 b9       	out	0x02, r24	; 2

	//set the timer/counter for 8 bit fast pwm
	TCCR1A |= (1<<WGM12)|(1<<WGM10);
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	89 60       	ori	r24, 0x09	; 9
 10c:	80 83       	st	Z, r24
	
	//set OC1A og OC1B pins on compare match, clear at bottom
	//aka inverting mode pga leds er koblet som active low. da er lysutgangen proporsjonelt med verdien som ligger i output compare register
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);
 10e:	80 81       	ld	r24, Z
 110:	80 6f       	ori	r24, 0xF0	; 240
 112:	80 83       	st	Z, r24
	
	//velg clock source til prescaler og sette den til en fornuftig verdi. denne operasjonen starter timeren.
	TCCR1B |= (1<<CS11);
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	
	//0-255
	OCR1A = 0x00;//fadeLevel;
 11e:	10 92 89 00 	sts	0x0089, r1
 122:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0xff;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 8b 00 	sts	0x008B, r25
 12e:	80 93 8a 00 	sts	0x008A, r24
    {
		if (! (PINC & (1<<SW1)))
		{
			if (!SW1_pressed)
			{
				OCR1A = (OCR1A<<1) + 1;
 132:	a8 e8       	ldi	r26, 0x88	; 136
 134:	b0 e0       	ldi	r27, 0x00	; 0
				OCR1B >>= 1;
 136:	ea e8       	ldi	r30, 0x8A	; 138
 138:	f0 e0       	ldi	r31, 0x00	; 0
				SW1_pressed=true;
 13a:	21 e0       	ldi	r18, 0x01	; 1
	OCR1B = 0xff;
	
		
    while (1) 
    {
		if (! (PINC & (1<<SW1)))
 13c:	31 99       	sbic	0x06, 1	; 6
 13e:	16 c0       	rjmp	.+44     	; 0x16c <main+0x78>
		{
			if (!SW1_pressed)
 140:	80 91 00 01 	lds	r24, 0x0100
 144:	81 11       	cpse	r24, r1
 146:	14 c0       	rjmp	.+40     	; 0x170 <main+0x7c>
			{
				OCR1A = (OCR1A<<1) + 1;
 148:	8d 91       	ld	r24, X+
 14a:	9c 91       	ld	r25, X
 14c:	11 97       	sbiw	r26, 0x01	; 1
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	11 96       	adiw	r26, 0x01	; 1
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
				OCR1B >>= 1;
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
				SW1_pressed=true;
 166:	20 93 00 01 	sts	0x0100, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <main+0x7c>
			}
		}
		else
			SW1_pressed=false;
 16c:	10 92 00 01 	sts	0x0100, r1
	
	
		if (! (PINA & (1<<SW2)))
 170:	00 99       	sbic	0x00, 0	; 0
 172:	16 c0       	rjmp	.+44     	; 0x1a0 <main+0xac>
		{
			if (!SW2_pressed)
 174:	80 91 01 01 	lds	r24, 0x0101
 178:	81 11       	cpse	r24, r1
 17a:	e0 cf       	rjmp	.-64     	; 0x13c <main+0x48>
			{
				OCR1A >>=1;
 17c:	8d 91       	ld	r24, X+
 17e:	9c 91       	ld	r25, X
 180:	11 97       	sbiw	r26, 0x01	; 1
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	9c 93       	st	X, r25
 18a:	8e 93       	st	-X, r24
				OCR1B = (OCR1B<<1) + 1;
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
				SW2_pressed=true;
 19a:	20 93 01 01 	sts	0x0101, r18
 19e:	ce cf       	rjmp	.-100    	; 0x13c <main+0x48>
			}
		}
		else
			SW2_pressed=false;
 1a0:	10 92 01 01 	sts	0x0101, r1
 1a4:	cb cf       	rjmp	.-106    	; 0x13c <main+0x48>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
