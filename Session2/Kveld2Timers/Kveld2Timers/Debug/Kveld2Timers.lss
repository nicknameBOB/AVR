
Kveld2Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ce  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000007a  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ce  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  0000064b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_13>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_14>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
{
	/*	First set up the leds as in the previous exercise. You can either 
		copy-paste, or you can try doing it from the start
	*/
	
	DDRC |= (1<<LED0);
  e4:	3f 9a       	sbi	0x07, 7	; 7
	DDRA |= (1<<LED3);
  e6:	0b 9a       	sbi	0x01, 3	; 1
	DDRD |= (1<<LED2) | (1<<LED1);
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	80 63       	ori	r24, 0x30	; 48
  ec:	8a b9       	out	0x0a, r24	; 10
			
	
	//TCCR1A |= (1<<COM1A0)|(1<<COM1B0);
	//toggle output pins on compare match for both channels
	TCCR1B |= (1<<WGM12)|(1<<CS12);
  ee:	e1 e8       	ldi	r30, 0x81	; 129
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8c 60       	ori	r24, 0x0C	; 12
  f6:	80 83       	st	Z, r24
	//clear timer on compare match (ctc) mode, clk=clk/256
	uint8_t value=TCCR1B & 0b111;
  f8:	80 81       	ld	r24, Z
	TCCR1C |= (1<<FOC1A)|(1<<FOC1B);
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 6c       	ori	r24, 0xC0	; 192
 102:	80 83       	st	Z, r24
	
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B);
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24

	
	//	To be able to react to interrupts from module, the mega has to enable interrupts globally.
	//	This is done via the function sei(), which is located in the (already included) header file <avr/interrupt.h>
	//	Note that this step is NOT the same as the previous, where we enabled interrupts for the timer module.
	sei();
 10e:	78 94       	sei
		
	//	To setup the timer, first set the max-value of the timer to 62500 This value effectively determines the 
	//	frequency with which the timer will overflow. When everything is working, try to modify this value and 
	//	observe how this change affects the period. 
		
	OCR1A=62500;//F_CPU/256;
 110:	84 e2       	ldi	r24, 0x24	; 36
 112:	94 ef       	ldi	r25, 0xF4	; 244
 114:	90 93 89 00 	sts	0x0089, r25
 118:	80 93 88 00 	sts	0x0088, r24
	OCR1B=31250;
 11c:	82 e1       	ldi	r24, 0x12	; 18
 11e:	9a e7       	ldi	r25, 0x7A	; 122
 120:	90 93 8b 00 	sts	0x008B, r25
 124:	80 93 8a 00 	sts	0x008A, r24
	/* NOTE: remember to fill in the ISR in the bottom of the file, else nothing will happen */
	
    while(1)
    {
        //Do nothing, the code in the ISR will execute periodically without any involvement of the main() loop. 
    }
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x44>

0000012a <__vector_13>:
}

ISR (TIMER1_COMPA_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	//hver sekund

	PORTA ^= (1<<LED3);
 138:	92 b1       	in	r25, 0x02	; 2
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	89 27       	eor	r24, r25
 13e:	82 b9       	out	0x02, r24	; 2
	
	//	As mentioned in the "kompendium", we need to manually reset the flags for the timer
	//	when we exit the interrupt service routine. This has been done for you: Do please check 
	//	out the INTFLAGS register description if you want to know what is going on.
	//TCC4.INTFLAGS |= ( 1 << TC4_OVFIF_bp)|(1 << TC4_TRGIF_bp );		//remove interrupt flags for the timer interrupt
}	
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_14>:

ISR (TIMER1_COMPB_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
	//hver sekund, dekalert
	PORTC ^= (1<<LED0);
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	80 58       	subi	r24, 0x80	; 128
 15e:	88 b9       	out	0x08, r24	; 8
}
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
