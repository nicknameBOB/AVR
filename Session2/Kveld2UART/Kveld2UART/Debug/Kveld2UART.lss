
Kveld2UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015c  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e1  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000011b  00000000  00000000  00000565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000186  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_28>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_30>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  dc:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <uart_init>:
int uart_init(unsigned int baud)
{
	/*	For å kunne sende og motta gjennom UART må man først sette riktig baud rate i UART baud rate register (UBRR)
		Dette blir gjørt for dere, men hvis dere skulle gjøre det selv kunne det være lurt å bruke tabellen fra seksjon 23.10 i databladet
	*/
	UBRR1 = (F_CPU/(((unsigned long)16*baud))-1);
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	aa 1f       	adc	r26, r26
  f6:	bb 1f       	adc	r27, r27
  f8:	9c 01       	movw	r18, r24
  fa:	ad 01       	movw	r20, r26
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	44 1f       	adc	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	44 1f       	adc	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	74 e2       	ldi	r23, 0x24	; 36
 110:	84 ef       	ldi	r24, 0xF4	; 244
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodsi4>
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	31 09       	sbc	r19, r1
 11c:	30 93 cd 00 	sts	0x00CD, r19
 120:	20 93 cc 00 	sts	0x00CC, r18
	//UBRR1=103;
	
	/* Sett 8 bits pakkelengde og 1 stoppebit ved å skrive UART control/status registrene B og C
	*/
	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);	//8 bit, 1 stop
 124:	ea ec       	ldi	r30, 0xCA	; 202
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	86 60       	ori	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
	
	/*	Til slutt start UART modulen ved å enable transmit og receive fra control/status register B
	*/
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1);
 12e:	e9 ec       	ldi	r30, 0xC9	; 201
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 61       	ori	r24, 0x18	; 24
 136:	80 83       	st	Z, r24
	return 0; //uart init successful
}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <uart_putchar>:
{
	/*	Denne funksjonen skal skrive en karakter til UART:
		Vent til transmissionsbufferen er tom (ligger i control/status register A)
		Så send karakteren til uart data register
	*/
	while ( !(UCSR1A & (1<<UDRE1)) ) 
 13e:	e8 ec       	ldi	r30, 0xC8	; 200
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	90 81       	ld	r25, Z
 144:	95 ff       	sbrs	r25, 5
 146:	fd cf       	rjmp	.-6      	; 0x142 <uart_putchar+0x4>
	;
	UDR1 = c;	
 148:	80 93 ce 00 	sts	0x00CE, r24
 14c:	08 95       	ret

0000014e <uart_getchar>:
{
	/*	Denne funksjonen skal lese en karakter fra UART:
		Vent til vi har motatt noen (Receive complete flagen blir satt i ett av control/status registrene)
		Så les mottaker bufferen og returner verdien som ligger i den
	*/
	while ( !(UCSR1A & (1<<RXC1)) )	
 14e:	e8 ec       	ldi	r30, 0xC8	; 200
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	ec f7       	brge	.-6      	; 0x152 <uart_getchar+0x4>
	;								
	return UDR1;					
 158:	80 91 ce 00 	lds	r24, 0x00CE
}
 15c:	08 95       	ret

0000015e <main>:
int main(void)
{
	/*	Sett opp leds på OLED1 Xplained PRO kortet som tidligere på kvelden,
		Disse skal bli brukt som indikatorer på at ting skjer i programmen vår
	*/
    DDRD |= (1<<LED1)|(1<<LED2);
 15e:	8a b1       	in	r24, 0x0a	; 10
 160:	80 63       	ori	r24, 0x30	; 48
 162:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<LED0);
 164:	3f 9a       	sbi	0x07, 7	; 7
	
	/*	Sett opp RX og TX interrupts
		Bruk dem til å blinke leds når vi sender og mottar noen gjennom UART
		(se beskrivelse av uart control/status register B)
	*/
	UCSR1B |= (1<<RXCIE1)|(1<<TXCIE1);
 166:	e9 ec       	ldi	r30, 0xC9	; 201
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 6c       	ori	r24, 0xC0	; 192
 16e:	80 83       	st	Z, r24
	sei();	//husk å sette global interrupt flag
 170:	78 94       	sei
	
	uart_init(19200);	//initialiser med ønsket baud rate
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	9b e4       	ldi	r25, 0x4B	; 75
 176:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_init>
    {
		/*	Motta en karakter gjennom UART
			Send den tilbake
			Og blink en led	
		*/
		uart_putchar(uart_getchar());
 17a:	0e 94 a7 00 	call	0x14e	; 0x14e <uart_getchar>
 17e:	0e 94 9f 00 	call	0x13e	; 0x13e <uart_putchar>
		PORTC ^= (1<<LED0);
 182:	88 b1       	in	r24, 0x08	; 8
 184:	80 58       	subi	r24, 0x80	; 128
 186:	88 b9       	out	0x08, r24	; 8
    }
 188:	f8 cf       	rjmp	.-16     	; 0x17a <main+0x1c>

0000018a <__vector_28>:
	return UDR1;					
}


ISR(USART1_RX_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
	//flash led1 når vi mottar noen
	PORTD ^= (1<<LED1);
 198:	9b b1       	in	r25, 0x0b	; 11
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	89 27       	eor	r24, r25
 19e:	8b b9       	out	0x0b, r24	; 11
}
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__vector_30>:

ISR(USART1_TX_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
	//flash led2 når vi sender noen
	PORTD ^= (1<<LED2);
 1bc:	9b b1       	in	r25, 0x0b	; 11
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	89 27       	eor	r24, r25
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__udivmodsi4>:
 1d2:	a1 e2       	ldi	r26, 0x21	; 33
 1d4:	1a 2e       	mov	r1, r26
 1d6:	aa 1b       	sub	r26, r26
 1d8:	bb 1b       	sub	r27, r27
 1da:	fd 01       	movw	r30, r26
 1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <__udivmodsi4_ep>

000001de <__udivmodsi4_loop>:
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	ee 1f       	adc	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	a2 17       	cp	r26, r18
 1e8:	b3 07       	cpc	r27, r19
 1ea:	e4 07       	cpc	r30, r20
 1ec:	f5 07       	cpc	r31, r21
 1ee:	20 f0       	brcs	.+8      	; 0x1f8 <__udivmodsi4_ep>
 1f0:	a2 1b       	sub	r26, r18
 1f2:	b3 0b       	sbc	r27, r19
 1f4:	e4 0b       	sbc	r30, r20
 1f6:	f5 0b       	sbc	r31, r21

000001f8 <__udivmodsi4_ep>:
 1f8:	66 1f       	adc	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	88 1f       	adc	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	1a 94       	dec	r1
 202:	69 f7       	brne	.-38     	; 0x1de <__udivmodsi4_loop>
 204:	60 95       	com	r22
 206:	70 95       	com	r23
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	9b 01       	movw	r18, r22
 20e:	ac 01       	movw	r20, r24
 210:	bd 01       	movw	r22, r26
 212:	cf 01       	movw	r24, r30
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
